name: CI
on:
  push:
    branches:
      - main
    tags:
      - "**"
  pull_request: {}

jobs:
  resolve:
    runs-on: ubuntu-latest
    outputs:
      MSRV: ${{ steps.resolve-msrv.outputs.MSRV }}
    steps:
      - uses: actions/checkout@v4

      - name: set up python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: resolve MSRV
        id: resolve-msrv
        run: echo MSRV=`python -c 'import tomllib; print(tomllib.load(open("Cargo.toml", "rb"))["workspace"]["package"]["rust-version"])'` >> $GITHUB_OUTPUT

  test:
    needs: [resolve]
    name: test rust-${{ matrix.rust-version }} on ${{ matrix.runs-on }}, Python ${{ matrix.python-version }}
    strategy:
      fail-fast: false
      matrix:
        rust-version: [stable]
        runs-on: [ubuntu, macos]
        python-version: ["3.13"]
        include:
          - rust-version: ${{ needs.resolve.outputs.MSRV }}
            runs-on: ubuntu
          - rust-version: stable
            runs-on: ubuntu
            python-version: "3.13t"
          - rust-version: nightly
            runs-on: ubuntu

    runs-on: ${{ matrix.runs-on }}-latest

    env:
      RUNS_ON: ${{ matrix.runs-on }}-latest
      RUST_VERSION: ${{ matrix.rust-version }}

    steps:
      - uses: actions/checkout@v4

      - name: set up python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust-version }}

      - name: Generate MSRV-compatible lockfile
        if: matrix.rust-version == needs.resolve.outputs.MSRV
        run: |
          CARGO_RESOLVER_INCOMPATIBLE_RUST_VERSIONS=fallback cargo +stable update

      - uses: Swatinem/rust-cache@v2
      - uses: taiki-e/install-action@cargo-llvm-cov

      - name: install cargo-careful
        if: matrix.rust-version == 'nightly'
        uses: taiki-e/install-action@cargo-careful

      - if: matrix.rust-version == 'nightly'
        run: cargo careful t -F python

      - run: cargo llvm-cov -F python --codecov --output-path codecov.json
        env:
          RUST_BACKTRACE: 1

      - uses: codecov/codecov-action@v4
        with:
          env_vars: RUNS_ON,RUST_VERSION
          files: codecov.json
          token: ${{ secrets.CODECOV_TOKEN }}

  test-python:
    name: test jiter-python ${{ matrix.python-version }}

    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.13", "3.13t"]

    env:
      RUNS_ON: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: set up python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - uses: taiki-e/install-action@cargo-llvm-cov

      - name: Install python dependencies
        run: pip install -r crates/jiter-python/tests/requirements.txt

      - name: Build jiter-python
        run: |
          source <(cargo llvm-cov show-env --export-prefix)
          cargo llvm-cov clean --workspace --profraw-only
          pip install -e crates/jiter-python --config-settings=build-args='--profile dev'

      - name: Run tests
        run: |
          source <(cargo llvm-cov show-env --export-prefix)
          pytest crates/jiter-python/tests
          python crates/jiter-python/bench.py jiter jiter-cache --fast
        env:
          RUST_BACKTRACE: 1

      - name: Coverage report
        run: |
          source <(cargo llvm-cov show-env --export-prefix)
          cargo llvm-cov report --codecov --output-path codecov.json

      - uses: codecov/codecov-action@v4
        with:
          files: codecov.json
          token: ${{ secrets.CODECOV_TOKEN }}

  bench:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - uses: moonrepo/setup-rust@v1
        with:
          channel: stable
          cache-target: release
          bins: cargo-codspeed

      - run: python crates/jiter/benches/generate_big.py

      - run: cargo codspeed build -F python -p jiter

      - uses: CodSpeedHQ/action@v3
        with:
          run: cargo codspeed run
          token: ${{ secrets.CODSPEED_TOKEN }}

  fuzz:
    name: fuzz on ${{ matrix.runs-on }}
    strategy:
      fail-fast: false
      matrix:
        runs-on: [ubuntu, macos]

    runs-on: ${{ matrix.runs-on }}-latest

    steps:
      - uses: actions/checkout@v4

      - uses: dtolnay/rust-toolchain@nightly
      - id: cache-rust
        uses: Swatinem/rust-cache@v2
      - if: steps.cache-rust.outputs.cache-hit != 'true'
        run: cargo install cargo-fuzz
      - run: |
          # cargo fuzz defaults to musl targets, which is seeming incomatible with sanitizers according to CI failures
          RUST_TARGET=$(rustc -Vv | grep host | cut -d ' ' -f 2)
          cargo fuzz run --target=$RUST_TARGET --fuzz-dir crates/fuzz compare_to_serde --release -- -max_total_time=300s

  fuzz-skip:
    name: fuzz skip
    # we only run this on ubuntu since architecture should make no difference

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: dtolnay/rust-toolchain@nightly
      - id: cache-rust
        uses: Swatinem/rust-cache@v2
      - if: steps.cache-rust.outputs.cache-hit != 'true'
        run: cargo install cargo-fuzz

      - run: |
          # cargo fuzz defaults to musl targets, which is seeming incomatible with sanitizers according to CI failures
          RUST_TARGET=$(rustc -Vv | grep host | cut -d ' ' -f 2)
          cargo fuzz run --target=$RUST_TARGET --fuzz-dir crates/fuzz compare_skip --release -- -max_total_time=300s

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: set up python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt,clippy

      - uses: Swatinem/rust-cache@v2

      - uses: pre-commit/action@v3.0.0
        with:
          extra_args: --all-files --verbose
        env:
          PRE_COMMIT_COLOR: always
          SKIP: test

      - run: cargo doc -F python

  build-sdist:
    name: build sdist
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: set up python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"
      - uses: PyO3/maturin-action@v1
        with:
          command: sdist
          args: --out dist
          rust-toolchain: stable
          working-directory: crates/jiter-python
      - uses: actions/upload-artifact@v4
        with:
          name: pypi_files_sdist
          path: crates/jiter-python/dist

  build:
    name: build on ${{ matrix.os }} (${{ matrix.target }} - ${{ matrix.interpreter || 'all' }}${{ matrix.os == 'linux' && format(' - {0}', matrix.manylinux == 'auto' && 'manylinux' || matrix.manylinux) || '' }})
    # only run on push to main and on release
    if: startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/main' || contains(github.event.pull_request.labels.*.name, 'Full Build')
    strategy:
      fail-fast: false
      matrix:
        os: [linux, windows, macos] # Added windows and macos here to simplify the matrix below
        target: [x86_64] # Default target
        manylinux: [auto] # Default manylinux for Linux
        interpreter: ["3.9", "3.10", "3.11", "3.12", "3.13", "3.14"]
        python-architecture: [x64] # Default for x86_64, will be 'x86' for i686 and 'arm64' for aarch64
        include:
          # --- Linux (original entries) ---
          - os: linux
            manylinux: auto
            target: i686
            interpreter: 3.9 3.10 3.11 3.12 3.13 3.14
            python-architecture: x86 # i686 usually corresponds to x86 python
          - os: linux
            manylinux: auto
            target: aarch64
            interpreter: 3.9 3.10 3.11 3.12 3.13 3.14
            python-architecture: x64 # Most linux aarch64 runners have 64-bit python
          - os: linux
            manylinux: auto
            target: armv7
            interpreter: 3.9 3.10 3.11 3.12 3.13 3.14
            python-architecture: x64 # Most linux armv7 runners have 64-bit python
          - os: linux
            manylinux: auto
            target: ppc64le
            interpreter: 3.9 3.10 3.11 3.12 3.13 3.14
            python-architecture: x64
          - os: linux
            manylinux: auto
            target: s390x
            interpreter: 3.9 3.10 3.11 3.12 3.13 3.14
            python-architecture: x64

          # musllinux
          - os: linux
            manylinux: musllinux_1_1
            target: x86_64
            interpreter: 3.9 3.10 3.11 3.12 3.13 3.14
            python-architecture: x64
          - os: linux
            manylinux: musllinux_1_1
            target: aarch64
            interpreter: 3.9 3.10 3.11 3.12 3.13 3.14
            python-architecture: x64

          # --- macOS (original entries) ---
          - os: macos
            target: x86_64
            interpreter: 3.9 3.10 3.11 3.12 3.13 3.14
            python-architecture: x64
          - os: macos
            target: aarch64
            interpreter: "3.9 3.10 3.11 3.12 3.13 3.14" # PYO3/maturin-action for universal2 will handle splitting if target is universal2
            python-architecture: x64 # For universal2, it's generally x64, even if aarch64 is built too

          # --- Windows (Updated and Added Arm64) ---
          - os: windows
            target: i686
            python-architecture: x86
            interpreter: 3.9 3.10 3.11 3.12 3.13 3.14
          - os: windows
            target: x86_64 # Ensure explicit x86_64 entry exists with specific python-architecture
            python-architecture: x64
            interpreter: 3.9 3.10 3.11 3.12 3.13 3.14
          # NEW: Windows Arm64
          - os: windows
            target: aarch64 # Or just aarch64 if maturin can infer
            python-architecture: arm64
            interpreter: 3.11 3.12 3.13 3.14 # Or whatever versions

        exclude:
          # PGO optimized below (keep this exclusion)
          - os: linux
            manylinux: auto
            target: x86_64
          # Exclude specific macOS combinations if PGO is preferred, or to avoid redundancy
          - os: macos
            target: x86_64
            interpreter: "3.10" # If PGO covers 3.10+ on macOS x86_64
          # Exclude if you only want PGO for these or have specific issues
          - os: windows
            target: x86_64
            interpreter: "3.10" # If PGO covers 3.10+ on Windows x86_64
          - os: windows
            target: i686
            interpreter: "3.14" # Example: if 3.14 on i686 windows is problematic
          - os: windows
            target: aarch64
            interpreter: 3.9 3.10 # Exclude older Python versions not supported on Windows Arm64

    runs-on: ${{ (matrix.os == 'windows' && (matrix.target == 'aarch64' && 'windows-11-arm' || 'windows-latest')) || (matrix.os == 'macos' && 'macos-latest') || 'ubuntu-latest' }}
    steps:
      - uses: actions/checkout@v4

      # Conditional Rustup installation for Windows Arm64
      - name: Install Rustup for Windows Arm64
        if: matrix.os == 'windows' && matrix.target == 'aarch64'
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable # Use stable or your preferred toolchain
          target: aarch64-pc-windows-msvc
          override: true
      - name: Check Runner Architecture
        run: |
          wmic os get osarchitecture
          # Or for more detail on Windows:
          # Get-WmiObject -Class Win32_Processor | Select-Object Architecture, AddressWidth, DataWidth, Name

      - name: set up python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13" # This is just the version for setup-python itself, not the target interpreter
          architecture: ${{ matrix.python-architecture || 'x64' }}

      - name: build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target == 'aarch64' && (matrix.os == 'windows' && 'aarch64-pc-windows-msvc' || matrix.os == 'macos' && 'universal2-apple-darwin' || matrix.os == 'linux' && 'aarch64-unknown-linux-gnu') || (matrix.target == 'armv7' && 'armv7-unknown-linux-gnueabihf') || (matrix.target == 'i686' && 'i686-unknown-linux-gnu') || (matrix.target == 'ppc64le' && 'powerpc64le-unknown-linux-gnu') || (matrix.target == 's390x' && 's390x-unknown-linux-gnu') || (matrix.target == 'x86_64' && (matrix.os == 'windows' && 'x86_64-pc-windows-msvc' || matrix.os == 'macos' && 'universal2-apple-darwin' || 'x86_64-unknown-linux-gnu')) }}
          manylinux: ${{ matrix.manylinux }}
          args: --release --out dist --interpreter ${{ matrix.interpreter || '3.9 3.10 3.11 3.12 3.13 3.14' }}
          rust-toolchain: stable
          working-directory: crates/jiter-python

      - run: ${{ (matrix.os == 'windows' && 'dir') || 'ls -lh' }} crates/jiter-python/dist/

      - run: |
          pip install -U twine
          twine check --strict crates/jiter-python/dist/*

      - uses: actions/upload-artifact@v4
        with:
          name: pypi_files_${{ matrix.os }}_${{ matrix.target }}_${{ matrix.interpreter || 'all' }}_${{ matrix.manylinux }}
          path: crates/jiter-python/dist

  build-pgo:
    name: build pgo-optimized on ${{ matrix.os }} / ${{ matrix.interpreter }}
    # only run on push to main and on release
    if: startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/main' || contains(github.event.pull_request.labels.*.name, 'Full Build')
    strategy:
      fail-fast: false
      matrix:
        os: [linux, windows, macos]
        interpreter:
          ["3.9", "3.10", "3.11", "3.12", "3.13", "3.13t", "3.14", "3.14t"]
        include:
          # standard runners with override for macos arm
          - os: linux
            runs-on: ubuntu-latest
          - os: windows
            ls: dir
            runs-on: windows-latest
            # Add explicit Windows Arm64 PGO (use aarch64 target for the runner selection)
            # IMPORTANT: Confirm PGO is fully supported and stable for Windows on ARM.
            # If `build-pgo` fails on `windows-11-arm`, you might need to exclude it or
            # use a conditional `runs-on` based on `matrix.architecture` for PGO.
          - os: windows
            runs-on: windows-11-arm # Target ARM64 runner for PGO
            interpreter: ["3.11", "3.12", "3.13", "3.14"] # Adjust based on actual Python versions available on windows-11-arm that support PGO
            target_architecture: aarch64 # Add this to distinguish for run-on and maturin-action
            ls: dir
          - os: macos
            runs-on: macos-latest
            target_architecture: universal2 # For PGO, it usually targets universal2

        exclude:
          # macos arm only supported from 3.10 and up
          - os: macos
            interpreter: "3.9"
          # windows 3.14 cffi install blocks build on 3.14 beta 1
          # https://github.com/python/cpython/issues/133779
          - os: windows
            interpreter: "3.14"
          - os: windows
            interpreter: "3.14t"
          # Exclude AARCH64 Windows for PGO if it proves unstable or not working
          # - os: windows
          #   runs-on: windows-11-arm # Explicitly exclude the arm64 runner if PGO doesn't work
          #   interpreter: "3.11" # For example, if 3.11 aarch64 PGO fails
          #   target_architecture: aarch64

    runs-on: ${{ matrix.runs-on }}
    steps:
      - uses: actions/checkout@v4

      # Conditional Rustup installation for Windows Arm64
      - name: Install Rustup for Windows Arm64 (PGO)
        if: matrix.os == 'windows' && matrix.target_architecture == 'aarch64'
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable # Use stable or your preferred toolchain
          target: aarch64-pc-windows-msvc
          override: true

      - id: setup-python
        name: set up python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.interpreter }}
          allow-prereleases: true
          # For PGO on Windows Arm64, ensure architecture is set correctly
          architecture: ${{ (matrix.os == 'windows' && matrix.target_architecture == 'aarch64' && 'arm64') || 'x64' }}

      - name: install rust stable
        id: rust-toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: llvm-tools
          # Ensure targets are installed for PGO if cross-compiling or building for specific arch
          targets: ${{ (matrix.os == 'windows' && matrix.target_architecture == 'aarch64' && 'aarch64-pc-windows-msvc') || '' }}


      - name: build pgo wheel
        uses: ./.github/actions/build-pgo-wheel
        with:
          interpreter: ${{ matrix.interpreter }}
          rust-toolchain: ${{ steps.rust-toolchain.outputs.name }}
          # Pass target to the custom action if it needs it for PGO compilation
          target: ${{ (matrix.os == 'windows' && matrix.target_architecture == 'aarch64' && 'aarch64-pc-windows-msvc') || '' }}

      - run: ${{ matrix.ls || 'ls -lh' }} crates/jiter-python/dist/

      - uses: actions/upload-artifact@v4
        with:
          name: pypi_files_${{ matrix.os }}_${{ matrix.interpreter }}
          path: crates/jiter-python/dist

  build-wasm-emscripten:
    # only run on push to main and on release
    if: startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/main' || contains(github.event.pull_request.labels.*.name, 'Full Build')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - id: setup-python
        name: set up python
        uses: actions/setup-python@v5
        with:
          python-version: 3.12

      - name: install rust nightly
        uses: dtolnay/rust-toolchain@master
        with:
          components: rust-src
          targets: wasm32-unknown-emscripten
          # might be able to unpin when pydodide uses emscripten 4, see below
          toolchain: nightly-2025-02-17

      - name: cache rust
        uses: Swatinem/rust-cache@v2

      - uses: mymindstorm/setup-emsdk@v14
        with:
          # NOTE!: as per https://github.com/pydantic/pydantic-core/pull/149 this version needs to match the version
          # in node_modules/pyodide/repodata.json, to get the version, run:
          # `cat node_modules/pyodide/repodata.json | python -m json.tool | rg platform`
          version: "3.1.58"
          actions-cache-folder: emsdk-cache

      - name: install deps
        run: pip install -U pip maturin

      - name: build wheels
        run: maturin build --release --target wasm32-unknown-emscripten --out dist -i 3.12
        working-directory: crates/jiter-python

      - uses: actions/setup-node@v4
        with:
          node-version: "18"

      - run: npm install
        working-directory: crates/jiter-python

      - run: npm run test
        working-directory: crates/jiter-python

      - run: |
          ls -lh dist/
          ls -l dist/
        working-directory: crates/jiter-python

      - uses: actions/upload-artifact@v4
        with:
          name: wasm_wheels
          path: crates/jiter-python/dist

  inspect-pypi-assets:
    needs: [build, build-sdist, build-pgo]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: get dist artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: pypi_files_*
          merge-multiple: true
          path: dist

      - name: list dist files
        run: |
          ls -lh dist/
          ls -l dist/
          echo "`ls dist | wc -l` files"

      - name: extract and list sdist file
        run: |
          mkdir sdist-files
          tar -xvf dist/*.tar.gz -C sdist-files
          tree -a sdist-files

      - name: extract and list wheel file
        run: |
          ls dist/*cp310-manylinux*x86_64.whl | head -n 1
          python -m zipfile --list `ls dist/*cp310-manylinux*x86_64.whl | head -n 1`

  test-builds-arch:
    name: test build on ${{ matrix.target }}-${{ matrix.distro }}
    needs: [build]
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        target: [aarch64, armv7, s390x, ppc64le]
        distro: ["ubuntu22.04"]
        include:
          - target: aarch64
            distro: alpine_latest
          # Add Windows Arm64 test if you have a way to run it on Arm emulator (e.g., using uraimo/run-on-arch-action with Windows support or custom setup)
          # This is more complex than just building, might require Windows Arm64 runner directly for testing
          # - target: aarch64 # For Windows arm64
          #   distro: windows-arm64 # A conceptual distro for Windows Arm64 testing
          #   # You would likely need to run this directly on `windows-11-arm` runner, not through run-on-arch-action
          #   # And download artifacts specific to `pypi_files_windows_aarch64_*`

    steps:
      - uses: actions/checkout@v4

      - name: get dist artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: pypi_files_linux_*
          merge-multiple: true
          path: crates/jiter-python/dist

      - uses: uraimo/run-on-arch-action@v2
        name: install & test
        with:
          arch: ${{ matrix.target }}
          distro: ${{ matrix.distro }}
          githubToken: ${{ github.token }}
          install: |
            set -x
            if command -v apt-get &> /dev/null; then
              echo "installing python & pip with apt-get..."
              apt-get update
              apt-get install -y --no-install-recommends python3 python3-pip python3-venv git
            else
              echo "installing python & pip with apk..."
              apk update
              apk add python3 py3-pip git
            fi
          run: |
            cd crates/jiter-python
            set -x
            # typing-extensions isn't automatically installed because of `--no-index --no-deps`
            python3 -m venv venv
            source venv/bin/activate
            python3 -m pip install -U pip -r tests/requirements.txt
            python3 -m pip install jiter --no-index --no-deps --find-links dist --force-reinstall
            python3 -m pytest
            python3 -c 'import jiter; print(jiter.__version__)'

  test-builds-os:
    name: test build on ${{ matrix.os }}
    needs: [build, build-pgo]

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu, macos, windows]
        include:
          # Explicitly target Windows Arm64 for testing, using the dedicated runner
          - os: windows
            runner: windows-11-arm
            architecture: arm64 # Add this to differentiate for python setup
          - os: windows
            runner: windows-latest
            architecture: x64
          - os: ubuntu
            runner: ubuntu-latest
            architecture: x64
          - os: macos
            runner: macos-latest
            architecture: x64

    runs-on: ${{ matrix.runner }}
    steps:
      - uses: actions/checkout@v4

      - name: set up python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"
          architecture: ${{ matrix.architecture }} # Use the architecture variable

      - name: get dist artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: pypi_files_${{ matrix.os }}_* # Download all wheels for the specific OS
          merge-multiple: true
          path: crates/jiter-python/dist

      - name: run tests
        run: |
          cd crates/jiter-python
          python3 -m pip install -U pip -r tests/requirements.txt
          python3 -m pip install jiter --no-index --no-deps --find-links dist --force-reinstall
          python3 -m pytest
          python3 -c 'import jiter; print(jiter.__version__)'

  # https://github.com/marketplace/actions/alls-green#why used for branch protection checks
  check:
    if: always()
    needs: [test, test-python, bench, fuzz, fuzz-skip, lint]
    runs-on: ubuntu-latest
    steps:
      - name: Decide whether the needed jobs succeeded or failed
        uses: re-actors/alls-green@release/v1
        with:
          jobs: ${{ toJSON(needs) }}

  release:
    needs: [check]
    if: success() && startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    environment: release

    steps:
      - uses: actions/checkout@v4

      - name: install rust stable
        uses: dtolnay/rust-toolchain@stable

      - uses: Swatinem/rust-cache@v2

      - run: cargo publish -p jiter
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}

  release-python:
    needs:
      - check
      - test-builds-arch
      - test-builds-os
      - build-sdist
      - build-wasm-emscripten
      # Add `build` and `build-pgo` explicitly if not already covered by `test-builds-os` needs
      - build # Ensure `build` job artifacts are available
      - build-pgo # Ensure `build-pgo` job artifacts are available
    if: success() && startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    environment: release-python
    permissions:
      id-token: write
      # needed to be able to upload wasm wheels
      contents: write

    steps:
      - uses: actions/checkout@v4

      - name: set up python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: get dist artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: pypi_files_*
          merge-multiple: true
          path: dist

      - run: |
          pip install -U twine
          ls -l dist/
          twine check --strict dist/*

      - name: upload to pypi
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist/

      - name: get wasm dist artifacts
        uses: actions/download-artifact@v4
        with:
          name: wasm_wheels
          path: wasm

      - name: upload to github release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            wasm/*.whl
          prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') }}
